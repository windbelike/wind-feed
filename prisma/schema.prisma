// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Thread {
    id        String   @id @default(uuid())
    content   String
    userId    String
    status    Int      @default(0) // 0: normal 1: deleted
    createdAt DateTime @default(now())
    likes     Like[]

    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    // one-to-many self relation
    parentThreadId String?
    parentThread   Thread?  @relation("ParentThread", fields: [parentThreadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childrenThread Thread[] @relation("ParentThread")

    @@unique([createdAt, id])
    @@index([userId])
    @@index([parentThreadId])
}

model Like {
    threadId String
    userId   String

    thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([threadId, userId]) // double primary key
    @@index([threadId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // non next auth
    hasNotification Boolean?
    threads         Thread[]
    likes           Like[]
    notifications   Notification[]

    // many-to-many self relation (implicit creating a middle relation table named _Followers)
    followers User[] @relation(name: "Followers")
    follows   User[] @relation(name: "Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Notification {
    id        String   @id @default(cuid())
    body      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@index([userId])
}
